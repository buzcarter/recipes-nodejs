{"version":3,"file":"recipeIndex.bundle.js","mappings":"mBAAA,MAAMA,EACM,eAGCC,EAAWC,OAAOC,OAAO,CACpCC,KAAM,UACNC,OAAQ,WAGJC,EAAcC,GAAYC,aAAaC,QAAQT,EAAsBU,KAAKC,UAAUJ,IAEnF,SAASK,IACd,IAAIL,EAAUC,aAAaK,QAAQb,GAUnC,OATAO,EAAUA,GAAWG,KAAKI,MAAMP,GAE3BA,IACHA,EAAU,CAEV,EACAD,EAAWC,IAGNA,CACT,CAEO,MAAMQ,EAAY,CAACC,EAAKC,KAC7B,MAAMV,EAAUK,IAChBL,EAAQS,GAAOC,EACfX,EAAWC,EAAQ,EAGRW,EAAS,CAACF,EAAKG,KAC1B,MACMF,EADUL,IACMI,GACtB,YAAiBI,IAAVH,EAAsBE,EAAeF,CAAK,EChC7CI,EAAYnB,OAAOC,OAAO,CAC9B,UACA,eACA,SAGImB,EACO,qBAGb,SAASC,EAAQC,GACfH,EAAUI,SAASC,GAASC,SAASC,KAAKC,UAAUC,OAAO,SAASJ,OACpEC,SAASC,KAAKC,UAAUE,IAAI,SAASP,IACvC,CAEA,SAASQ,IACP,MAAM,KAAER,GAASS,KAAKC,QACtBnB,EAAUd,EAASG,KAAMoB,GACzBD,EAAQC,EACV,CClBA,MAAMW,EACI,4BAGJ,EACU,kBADV,EAEU,gBAFV,EAGU,oBAGVC,EACI,GAIJC,EAASpB,GAAUA,EACtBqB,OACAC,cACAC,QAAQ,MAAO,IACfA,QAAQ,OAAQ,KAEnB,SAASC,EAAOC,GACd,MAAMC,EAAQD,EAAWE,MAAM,OAAOC,KAAKC,GAAMT,EAAMS,KAAIL,OAAOM,SAElEpB,SAASqB,iBAAiB,GACvBvB,SAASwB,IACHP,GACHO,EAAKpB,UAAUC,OAAOK,GAExB,MAAM,WAAEe,GAAeD,EAAKf,SAAW,GACjCiB,EAAUR,EAAMS,QAAO,CAACC,EAAKC,IAASD,GAAOH,EAAWK,SAASD,KAAO,GAC9EL,EAAKpB,UAAU2B,OAAOrB,GAAgBgB,EAAQ,GAEpD,CAEA,MAAMM,EAAa,KACjB,MAAMC,EAAQ/B,SAASgC,cAAc,GACrCD,EAAMzC,MAAQ,GACdyC,EAAME,QACNnB,EAAO,IACP1B,EAAUd,EAASI,OAAQ,GAAG,GCvChC,WACE,MAAMmB,EAAON,EAAOjB,EAASG,KAAM,WFkB9B,IAAcyD,GCuBd,SAAcC,GAEnBnC,SAASqB,iBAAiB,GAAwBvB,SAASwB,GAASA,EAAKf,QAAQgB,WAAab,EAAMY,EAAKc,aAEzG,MAAML,EAAQ/B,SAASgC,cAAc,GACrCD,EAAMzC,MAAQ6C,GAAe,GAC7BrB,EAAOqB,GAEPJ,EAAMM,iBAAiB,SAAS,WAC9BjD,EAAUd,EAASI,OAAQ4B,KAAKhB,OAChCwB,EAAOR,KAAKhB,MACd,IAEAyC,EAAMM,iBAAiB,WAAYC,GAAMA,EAAEC,QAAU9B,GAAmBqB,MAExE9B,SAASgC,cAAc,GAAqBK,iBAAiB,QAASP,EACxE,CCrDE,CAHevC,EAAOjB,EAASI,OAAQ,KFiBpBwD,EEbNrC,EFcbG,SAASqB,iBAAiB1B,GACvBG,SAASwB,GAASA,EAAKe,iBAAiB,QAAShC,KACpDT,EAAQsC,EEfV,CAEAM,E","sources":["webpack://recipes-nodejs/./src/static/scripts/preferences.js","webpack://recipes-nodejs/./src/static/scripts/viewPicker.js","webpack://recipes-nodejs/./src/static/scripts/searchBox.js","webpack://recipes-nodejs/./src/static/scripts/indexApp.js"],"sourcesContent":["const StorageKeys = {\n  APP_NAME: 'RecipeNodeJs',\n};\n\nexport const KeyNames = Object.freeze({\n  VIEW: 'content',\n  SEARCH: 'search',\n});\n\nconst setAppData = (payload) => localStorage.setItem(StorageKeys.APP_NAME, JSON.stringify(payload));\n\nexport function getAppData() {\n  let payload = localStorage.getItem(StorageKeys.APP_NAME);\n  payload = payload && JSON.parse(payload);\n\n  if (!payload) {\n    payload = {\n\n    };\n    setAppData(payload);\n  }\n\n  return payload;\n}\n\nexport const updateKey = (key, value) => {\n  const payload = getAppData();\n  payload[key] = value;\n  setAppData(payload);\n};\n\nexport const getKey = (key, defaultValue) => {\n  const payload = getAppData();\n  const value = payload[key];\n  return value === undefined ? defaultValue : value;\n};\n","import { KeyNames, updateKey } from './preferences.js';\n\nconst ViewTypes = Object.freeze([\n  'content',\n  'compact-list',\n  'grid',\n]);\n\nconst Selectors = {\n  RADIO_BTN: '.js-view-radio-btn',\n};\n\nfunction setView(view) {\n  ViewTypes.forEach((name) => document.body.classList.remove(`view--${name}`));\n  document.body.classList.add(`view--${view}`);\n}\n\nfunction onClick() {\n  const { view } = this.dataset;\n  updateKey(KeyNames.VIEW, view);\n  setView(view);\n}\n\nexport function init(initialIndexView) {\n  document.querySelectorAll(Selectors.RADIO_BTN)\n    .forEach((item) => item.addEventListener('click', onClick));\n  setView(initialIndexView);\n}\n","import { KeyNames, updateKey } from './preferences.js';\n\n/* eslint-disable key-spacing */\nconst Styles = {\n  HIDDEN: 'recipe-list__item--hidden',\n};\n\nconst Selectors = {\n  RECIPE_ITEMS: '.recipe-list li',\n  SEARCH:       '#filter-field',\n  CLEAR_BTN:    '#clear-filter-btn',\n};\n\nconst KeyCodes = {\n  ESCAPE: 27,\n};\n  /* eslint-enable key-spacing */\n\nconst scrub = (value) => value\n  .trim()\n  .toLowerCase()\n  .replace(/\\W/g, '')\n  .replace(/\\s+/g, ' ');\n\nfunction filter(filterText) {\n  const words = filterText.split(/\\s+/).map((w) => scrub(w)).filter(Boolean);\n\n  document.querySelectorAll(Selectors.RECIPE_ITEMS)\n    .forEach((item) => {\n      if (!filterText) {\n        item.classList.remove(Styles.HIDDEN);\n      }\n      const { searchText } = item.dataset || '';\n      const isMatch = words.reduce((acc, word) => acc && searchText.includes(word), true);\n      item.classList.toggle(Styles.HIDDEN, !isMatch);\n    });\n}\n\nconst clearInput = () => {\n  const input = document.querySelector(Selectors.SEARCH);\n  input.value = '';\n  input.focus();\n  filter('');\n  updateKey(KeyNames.SEARCH, '');\n};\n\nexport function init(initalValue) {\n  // eslint-disable-next-line no-return-assign\n  document.querySelectorAll(Selectors.RECIPE_ITEMS).forEach((item) => item.dataset.searchText = scrub(item.innerText));\n\n  const input = document.querySelector(Selectors.SEARCH);\n  input.value = initalValue || '';\n  filter(initalValue);\n\n  input.addEventListener('keyup', function onKeyUp() {\n    updateKey(KeyNames.SEARCH, this.value);\n    filter(this.value);\n  });\n\n  input.addEventListener('keydown', (e) => e.which === KeyCodes.ESCAPE && clearInput());\n\n  document.querySelector(Selectors.CLEAR_BTN).addEventListener('click', clearInput);\n}\n","import { init as initViewBtns } from './viewPicker.js';\nimport { init as initSearchBox } from './searchBox.js';\nimport { KeyNames, getKey } from './preferences.js';\n\nfunction run() {\n  const view = getKey(KeyNames.VIEW, 'content');\n  const search = getKey(KeyNames.SEARCH, '');\n\n  // TODO: for now always init search first\n  initSearchBox(search);\n  initViewBtns(view);\n}\n\nrun();\n"],"names":["StorageKeys","KeyNames","Object","freeze","VIEW","SEARCH","setAppData","payload","localStorage","setItem","JSON","stringify","getAppData","getItem","parse","updateKey","key","value","getKey","defaultValue","undefined","ViewTypes","Selectors","setView","view","forEach","name","document","body","classList","remove","add","onClick","this","dataset","Styles","KeyCodes","scrub","trim","toLowerCase","replace","filter","filterText","words","split","map","w","Boolean","querySelectorAll","item","searchText","isMatch","reduce","acc","word","includes","toggle","clearInput","input","querySelector","focus","initialIndexView","initalValue","innerText","addEventListener","e","which","run"],"sourceRoot":""}